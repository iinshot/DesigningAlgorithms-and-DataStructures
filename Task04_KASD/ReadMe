Определить обобщённый класс MyArrayList. Класс представляет собой реализацию 
динамического массива, который может расти по мере необходимости. 
Необходимы поля: 
1) elementData – массив обобщённого (универсального) типа T для хранения 
элементов динамического массива; 
2) size – количество элементов в динамическом массиве. 
Необходимо реализовать следующую функциональность: 
1) Конструктор MyArrayList() для создания пустого динамического массива. 
2) Конструктор MyArrayList(T[] a) для создания динамического массива и заполнения 
его элементами из передаваемого массива a. 
3) Конструктор MyArrayList(int capacity) для создания пустого динамического массива 
с внутренним массивом, размер которого будет равен значению параметра 
capacity.
4) Метод add(T e) для добавления элемента в конец динамического массива. Если 
размер динамического массива больше размера внутреннего массива, необходимо 
создать новый массив размером в 1,5 раза больше исходного, плюс один элемент, 
скопировать все элементы из старого массива в новый и сохранить новый массив 
во внутренней переменной объекта MyArrayList. 
5) Метод addAll(T[] a) для добавления элементов из массива. 
6) Метод clear() для удаления всех элементов из динамического массива. 
7) Метод contains(object o) для проверки, находится ли указанный объект в 
динамическом массиве. 
8) Метод containsAll(T[] a) для проверки, содержатся ли указанные объекты в 
динамическом массиве. 
9) Метод isEmpty() для проверки, является ли динамический массив пустым. 
10) Метод remove(object o) для удаления указанного объекта из динамического 
массива, если он есть там. 
11) Метод removeAll(T[] a) для удаления указанных объектов из динамического 
массива. 
12) Метод retainAll(T[] a) для оставления в динамическом массиве только указанных 
объектов. 
13) Метод size() для получения размера динамического массива в элементах. 
14) Метод toArray() для возвращения массива объектов, содержащего все элементы 
динамического массива. 
15) Метод toArray(T[] a) для возвращения массива объектов, содержащего все 
элементы динамического массива. Если аргумент a равен null, то создаётся новый 
массив, в который копируются элементы. 
16) Метод add(int index, T e) для добавления элемента в указанную позицию. 
17) Метод addAll(int index, T[] a) для добавления элементов в указанную позицию. 
18) Метод get(int index) для возвращения элемента в указанной позиции. 
19) Метод indexOf(object o) для возвращения индекса указанного объекта, или -1, если 
его нет в динамическом массиве. 
20) Метод lastIndexOf(object o) для нахождения последнего вхождения указанного 
объекта, или -1, если его нет в динамическом массиве. 
21) Метод remove(int index) для удаления и возвращения элемента в указанной 
позиции. 
22) Метод set(int index, T e) для замены элемента в указанной позиции новым 
элементом. 
23) Метод subList(int fromIndex, int toIndex) для возвращения части динамического 
массива, т.е. элементов в диапазоне [fromIndex; toIndex). 
Динамический массив должен обладать следующими преимуществами: 
1) Быстрый доступ по индексу. Скорость такой операции – O(1). 
2) Быстрые вставка и удаление элементов с конца. Скорость операций опять же – 
O(1). 
Предусмотреть обработку возможных ошибок. 
