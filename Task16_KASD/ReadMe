Определить обобщённый класс MyLinkedList. Класс представляет собой реализацию 
двунаправленного списка, где каждый элемент структуры содержит указатели на 
предыдущий и следующий элементы. 
Необходимы поля: 
1) first – указатель на первый элемент двунаправленного списка; 
2) last – указатель на последний элемент двунаправленного списка; 
3) size – количество элементов в двунаправленном списке. 
Необходимо реализовать следующую функциональность: 
1) Конструктор MyLinkedList() для создания пустого двунаправленного списка. 
2) Конструктор MyLinkedList(T[] a) для создания двунаправленного списка и 
заполнения его элементами из передаваемого массива a. 
3) Конструктор MyLinkedList(int capacity) для создания пустого двунаправленного 
списка с внутренним массивом, размер которого будет равен значению параметра 
capacity. 
4) Метод add(T e) для добавления элемента в конец двунаправленного списка. 
5) Метод addAll(T[] a) для добавления элементов из массива. 
6) Метод clear() для удаления всех элементов из двунаправленного списка. 
7) Метод contains(object o) для проверки, находится ли указанный объект в 
двунаправленном списке. 
8) Метод containsAll(T[] a) для проверки, содержатся ли указанные объекты в 
двунаправленном списке. 
9) Метод isEmpty() для проверки, является ли двунаправленный список пустым. 
10) Метод remove(object o) для удаления указанного объекта из двунаправленного 
списка, если он есть там. 
11) Метод removeAll(T[] a) для удаления указанных объектов из двунаправленного 
списка. 
12) Метод retainAll(T[] a) для оставления в двунаправленном списке только указанных 
объектов. 
13) Метод size() для получения размера двунаправленного списка в элементах. 
14) Метод toArray() для возвращения массива объектов, содержащего все элементы 
двунаправленного списка. 
15) Метод toArray(T[] a) для возвращения массива объектов, содержащего все 
элементы двунаправленного списка. Если аргумент a равен null, то создаётся новый 
массив, в который копируются элементы. 
16) Метод add(int index, T e) для добавления элемента в указанную позицию. 
17) Метод addAll(int index, T[] a) для добавления элементов в указанную позицию. 
18) Метод get(int index) для возвращения элемента в указанной позиции. 
19) Метод indexOf(object o) для возвращения индекса указанного объекта, или -1, если 
его нет в двунаправленном списке. 
20) Метод lastIndexOf(object o) для нахождения последнего вхождения указанного 
объекта, или -1, если его нет в двунаправленном списке. 
21) Метод remove(int index) для удаления и возвращения элемента в указанной 
позиции. 
22) Метод set(int index, T e) для замены элемента в указанной позиции новым 
элементом. 
23) Метод subList(int fromIndex, int toIndex) для возвращения части двунаправленного 
списка, т.е. элементов в диапазоне [fromIndex; toIndex). 
24) Метод element() для возвращения элемента из головы двунаправленного списка 
без его удаления. 
25) Метод offer(T obj) для попытки добавления элемента obj в двунаправленный 
список. Возвращает true, если obj добавлен, и false в противном случае. 
26) Метод peek() для возврата элемента из головы двунаправленного списка без его 
удаления. Возвращает null, если двунаправленный список пуст. 
27) Метод poll() для удаления и возврата элемента из головы двунаправленного 
списка. Возвращает null, если двунаправленный список пуст. 
28) Метод addFirst(T obj) для добавления obj в голову двунаправленного списка. 
29) Метод addLast(T obj) для добавления obj в хвост двунаправленного списка. 
30) Метод getFirst() для возвращения первого элемента двунаправленного списка без 
его удаления. 
31) Метод getLast() для возвращения последнего элемента двунаправленного списка 
без его удаления. 
32) Метод offerFirst(T obj) для попытки добавления obj в голову двунаправленного 
списка. Возвращает true, если obj добавлен, и false при попытке добавить obj в 
полный двунаправленный список ограниченной ёмкости. 
33) Метод offerLast(T obj) для попытки добавления obj в хвост двунаправленного 
списка. Возвращает true, если obj добавлен, и false в противном случае. 
34) Метод рор() для возвращения элемента из головы двунаправленного списка с его 
удалением. 
35) Метод push(T obj) для добавления элемента в голову двунаправленного списка. 
36) Метод peekFirst() для возвращения элемента из головы двунаправленного списка 
без его удаления. Возвращает null, если двунаправленный список пуст. 
37) Метод peekLast() для возвращения элемента из хвоста двунаправленного списка 
без его удаления. Возвращает null, если двунаправленный список пуст. 
38) Метод pollFirst() для возвращения элемента из головы двунаправленного списка с 
его удалением. Возвращает null, если двунаправленный список пуст. 
39) Метод pollLast() для возвращения элемента из хвоста двунаправленного списка с 
его удалением. Возвращает null, если двунаправленный список пуст. 
40) Метод removeLast() для возвращения элемента из конца двунаправленного списка 
с его удалением. 
41) Метод removeFirst() для возвращения элемента из головы двунаправленного 
списка с его удалением. 
42) Метод removeLastOccurrence(object obj) для удаления последнего вхождения obj из 
двунаправленного списка. Возвращает true в случае успеха и false, если 
двунаправленный список не содержал obj. 
43) Метод removeFirstOccurrence(object obj) для удаления первого вхождения obj из 
двунаправленного списка. Возвращает true в случае успеха и false, если 
двунаправленный список не содержал obj. 
Динамический массив должен обладать следующими преимуществами: 
1) Быстрые вставка и удаление элементов с начала и конца списка. Скорость 
операций  – O(1). 
2) Быстрое получение первого и последнего элементов списка. Скорость операций – 
O(1). 
Предусмотреть обработку возможных ошибок. 
