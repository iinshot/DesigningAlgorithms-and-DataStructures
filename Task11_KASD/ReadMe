Определить обобщённый класс MyPriorityQueue. Класс представляет собой реализацию 
очереди с приоритетами, которая может расти по мере необходимости, использующую 
кучу. 
Необходимы поля: 
1) queue – массив обобщённого (универсального) типа T для хранения элементов; 
2) size – количество элементов в очереди с приоритетами; 
3) comparator – компаратор для сравнения элементов в очереди с приоритетами. 
Необходимо реализовать следующую функциональность: 
1) Конструктор MyPriorityQueue() для создания пустой очереди с приоритетами с 
начальной ёмкостью 11, размещающей элементы согласно естественному порядку 
сортировки. 
2) Конструктор MyPriorityQueue(T[] a) для создания очереди с приоритетами, 
содержащей элементы передаваемого массива a; 
3) Конструктор MyPriorityQueue(int initialCapacity) для создания пустой очереди с 
приоритетами с указанной начальной ёмкостью; 
4) Конструктор MyPriorityQueue(int initialCapacity, PriorityQueueComparer comparator) 
для создания пустой очереди с приоритетами с указанной начальной ёмкостью и 
компаратором; 
5) Конструктор MyPriorityQueue(MyPriorityQueue<T> c) для создания очереди с 
приоритетами, содержащей элементы указанной очереди с приоритетами. 
6) Метод add(T e) для добавления элемента в конец очереди с приоритетами. Если 
текущая ёмкость меньше 64, то новая ёмкость увеличивается на 2. В противном 
случае новая ёмкость увеличивается на 50% от текущей ёмкости. 
7) Метод addAll(T[] a) для добавления элементов из массива. 
8) Метод clear() для удаления всех элементов из очереди с приоритетами. 
9) Метод contains(object o) для проверки, находится ли указанный объект в очереди с 
приоритетами. 
10) Метод containsAll(T[] a) для проверки, содержатся ли указанные объекты в очереди 
с приоритетами. 
11) Метод isEmpty() для проверки, является ли очередь с приоритетами пустой. 
12) Метод remove(object o) для удаления указанного объекта из очереди с 
приоритетами, если он есть там. 
13) Метод removeAll(T[] a) для удаления указанных объектов из очереди с 
приоритетами. 
14) Метод retainAll(T[] a) для оставления в очереди с приоритетами только указанных 
объектов. 
15) Метод size() для получения размера очереди с приоритетами в элементах. 
16) Метод toArray() для возвращения массива объектов, содержащего все элементы 
очереди с приоритетами. 
17) Метод toArray(T[] a) для возвращения массива объектов, содержащего все 
элементы очереди с приоритетами. Если аргумент a равен null, то создаётся новый 
массив, в который копируются элементы. 
18) Метод element() для возвращения элемента из головы очереди с приоритетами без 
его удаления. 
19) Метод offer(T obj) для попытки добавления элемента obj в очередь с 
приоритетами. Возвращает true, если obj добавлен, и false в противном случае. 
20) Метод peek() для возврата элемента из головы очереди с приоритетами без его 
удаления. Возвращает null, если очередь пуста. 
21) Метод poll() для удаления и возврата элемента из головы очереди с приоритетами. 
Возвращает null, если очередь пуста. 
Предусмотреть обработку возможных ошибок.
