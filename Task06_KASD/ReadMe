Определить обобщённый класс MyVector. Класс представляет собой реализацию вектора, 
который может расти по мере необходимости. 
Необходимы поля: 
1) elementData – массив обобщённого (универсального) типа T для хранения 
элементов вектора; 
2) elementCount – количество элементов в векторе; 
3) capacityIncrement – значение, на которое увеличивается ёмкость вектора при 
необходимости. 
Необходимо реализовать следующую функциональность: 
1) Конструктор MyVector(int initialCapacity, int capacityIncrement) для создания пустого 
вектора с начальной ёмкостью initialCapacity и значением приращения ёмкости 
capacityIncrement. 
2) Конструктор MyVector(int initialCapacity) для создания пустого вектора с начальной 
ёмкостью initialCapacity и значением приращения ёмкости по умолчанию (0). 
3) Конструктор MyVector() для создания пустого вектора с начальной ёмкостью по 
умолчанию (10) и значением приращения ёмкости по умолчанию (0). 
4) Конструктор MyVector(T[] a) для создания вектора и заполнения его элементами из 
передаваемого массива a. 
5) Метод add(T e) для добавления элемента в конец вектора. Если размер вектора 
больше текущей ёмкости, необходимо увеличить ёмкость вектора на значение 
capacityIncrement (если оно не равно 0) или удвоить текущую ёмкость. 
6) Метод addAll(T[] a) для добавления элементов из массива. 
7) Метод clear() для удаления всех элементов из вектора. 
8) Метод contains(object o) для проверки, находится ли указанный объект в векторе. 
9) Метод containsAll(T[] a) для проверки, содержатся ли указанные объекты в векторе. 
10) Метод isEmpty() для проверки, является ли вектор пустым. 
11) Метод remove(object o) для удаления указанного объекта из вектора, если он есть 
там. 
12) Метод removeAll(T[] a) для удаления указанных объектов из вектора. 
13) Метод retainAll(T[] a) для оставления в векторе только указанных объектов. 
14) Метод size() для получения размера вектора в элементах. 
15) Метод toArray() для возвращения массива объектов, содержащего все элементы 
вектора. 
16) Метод toArray(T[] a) для возвращения массива объектов, содержащего все 
элементы вектора. Если аргумент a равен null, то создаётся новый массив, в 
который копируются элементы. 
17) Метод add(int index, T e) для добавления элемента в указанную позицию. 
18) Метод addAll(int index, T[] a) для добавления элементов в указанную позицию. 
19) Метод get(int index) для возвращения элемента в указанной позиции. 
20) Метод indexOf(object o) для возвращения индекса указанного объекта, или -1, если 
его нет в векторе. 
21) Метод lastIndexOf(object o) для нахождения последнего вхождения указанного 
объекта, или -1, если его нет в векторе. 
22) Метод remove(int index) для удаления и возвращения элемента в указанной 
позиции. 
23) Метод set(int index, T e) для замены элемента в указанной позиции новым 
элементом. 
24) Метод subList(int fromIndex, int toIndex) для возвращения части вектора, т.е. 
элементов в диапазоне [fromIndex; toIndex). 
25) Метод firstElement() для обращения к первому элементу вектора. 
26) Метод lastElement() для обращения к последнему элементу вектора. 
27) Метод removeElementAt(int pos) для удаления элемента в заданной позиции. 
28) Метод removeRange(int begin, int end) для удаления нескольких подряд идущих 
элементов. 
Вектор должен обладать следующими преимуществами: 
1) Быстрый доступ по индексу. Скорость такой операции – O(1). 
2) Быстрые вставка и удаление элементов с конца. Скорость операций опять же – 
O(1). 
Предусмотреть обработку возможных ошибок.
