Определить обобщённый класс MyArrayDeque. Класс представляет собой реализацию 
двунаправленной очереди, которая может расти по мере необходимости. 
Необходимы поля: 
1) elements – массив обобщённого (универсального) типа E для хранения элементов; 
2) head – индекс головы двунаправленной очереди; 
3) tail – индекс хвоста двунаправленной очереди. 
Необходимо реализовать следующую функциональность: 
1) Конструктор MyArrayDeque() для создания пустой двунаправленной очереди с 
начальной вместимостью 16 элементов. 
2) Конструктор MyArrayDeque(T[] a) для создания двунаправленной очереди из 
элементов передаваемого массива a. 
3) Конструктор MyArrayDeque(int numElements) для создания пустой 
двунаправленной очереди с указанной вместимостью. 
4) Метод add(T e) для добавления элемента в конец двунаправленной очереди. Если 
текущая ёмкость очереди недостаточна для добавления нового элемента, то 
ёмкость очереди удваивается. Затем элемент добавляется в конец очереди, и при 
необходимости индексы начала и конца очереди обновляются. 
5) Метод addAll(T[] a) для добавления элементов из массива. 
6) Метод clear() для удаления всех элементов из двунаправленной очереди. 
7) Метод contains(object o) для проверки, находится ли указанный объект в 
двунаправленной очереди. 
8) Метод containsAll(T[] a) для проверки, содержатся ли указанные объекты в 
двунаправленной очереди. 
9) Метод isEmpty() для проверки, является ли двунаправленная очередь пустой. 
10) Метод remove(object o) для удаления указанного объекта из двунаправленной 
очереди, если он есть там. 
11) Метод removeAll(T[] a) для удаления указанных объектов из двунаправленной 
очереди. 
12) Метод retainAll(T[] a) для оставления в двунаправленной очереди только указанных 
объектов. 
13) Метод size() для получения размера двунаправленной очереди в элементах. 
14) Метод toArray() для возвращения массива объектов, содержащего все элементы 
двунаправленной очереди. 
15) Метод toArray(T[] a) для возвращения массива объектов, содержащего все 
элементы двунаправленной очереди. Если аргумент a равен null, то создаётся 
новый массив, в который копируются элементы. 
16) Метод element() для возвращения элемента из головы двунаправленной очереди 
без его удаления. 
17) Метод offer(T obj) для попытки добавления элемента obj в двунаправленную 
очередь. Возвращает true, если obj добавлен, и false в противном случае. 
18) Метод peek() для возврата элемента из головы двунаправленной очереди без его 
удаления. Возвращает null, если двунаправленная очередь пуста. 
19) Метод poll() для удаления и возврата элемента из головы двунаправленной 
очереди. Возвращает null, если двунаправленная очередь пуста. 
20) Метод addFirst(T obj) для добавления obj в голову двунаправленной очереди. 
21) Метод addLast(T obj) для добавления obj в хвост двунаправленной очереди. 
22) Метод getFirst() для возвращения первого элемента двунаправленной очереди без 
его удаления. 
23) Метод getLast() для возвращения последнего элемента двунаправленной очереди 
без его удаления. 
24) Метод offerFirst(T obj) для попытки добавления obj в голову двунаправленной 
очереди. Возвращает true, если obj добавлен, и false при попытке добавить obj в 
полную двунаправленную очередь ограниченной ёмкости. 
25) Метод offerLast(T obj) для попытки добавления obj в хвост двунаправленной 
очереди. Возвращает true, если obj добавлен, и false в противном случае. 
26) Метод рор() для возвращения элемента из головы двунаправленной очереди с его 
удалением. 
27) Метод push(T obj) для добавления элемента в голову двунаправленной очереди. 
28) Метод peekFirst() для возвращения элемента из головы двунаправленной очереди 
без его удаления. Возвращает null, если двунаправленная очередь пуста. 
29) Метод peekLast() для возвращения элемента из хвоста двунаправленной очереди 
без его удаления. Возвращает null, если двунаправленная очередь пуста. 
30) Метод pollFirst() для возвращения элемента из головы двунаправленной очереди с 
его удалением. Возвращает null, если двунаправленная очередь пуста. 
31) Метод pollLast() для возвращения элемента из хвоста двунаправленной очереди с 
его удалением. Возвращает null, если двунаправленная очередь пуста. 
32) Метод removeLast() для возвращения элемента из конца двунаправленной очереди 
с его удалением. 
33) Метод removeFirst() для возвращения элемента из головы двунаправленной 
очереди с его удалением. 
34) Метод removeLastOccurrence(object obj) для удаления последнего вхождения obj из 
двунаправленной очереди. Возвращает true в случае успеха и false, если 
двунаправленная очередь не содержала obj. 
35) Метод removeFirstOccurrence(object obj) для удаления первого вхождения obj из 
двунаправленной очереди. Возвращает true в случае успеха и false, если 
двунаправленная очередь не содержала obj. 
Предусмотреть обработку возможных ошибок.
